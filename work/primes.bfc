: I Q @ ! - * / leq? ; emit getc pick

: . I 42 86 01 1 * ! 86 ! ; .

: ?ret 00001 @ - -0001 * 1 ! ; .

: !ret 001 @ @ 1 @ 1 - 1 ! 000001 @ ! ; .

: dup 0 pick ; .

: drop 0 * - ; .

: , 0 @ ! 0 @ -1 - 0 ! ;

: + -001 * - ; .

: over 1 pick ; .

: nip over - + ; .

: % over over / * - ; .

: >r I 2 , 01 , 97 1 - 2 / , 2 , -0001 , 66 0010 - , 2 , 0 , 95 0011 - 1 * ,
    2 , 01 , 53 001 - , 53 001 - , ;

: r> I 3 1 - , 1 , 48 dup dup , , 3 1 - , 1 1 * , , 2 , 01 , 57 1 - , 2 , 01 ,
    53 1 - , ;

: swap over >r nip r> ;

: <= - leq? ;

: >= over <= nip ;

: not-too-big dup 009 <= ?ret !ret drop ; .

1

: nl 10 emit ; .

: not-too-small dup 0 >= ?ret !ret drop ; .

: read-loop; !ret
    getc 59 11 - -
    not-too-big not-too-small
    over 0011 1 - * + nip read-loop; .

1

: read-num 0 read-loop; .

: enough? over leq? leq? ?ret !ret drop drop ; .

: (primes); I 2 , 1 1 - @ 3 1 - + dup , 2099 + 72 , 0 ! ; .

: primes (primes); .

: end? dup @ leq? leq? ?ret !ret drop drop .1 ; .

: found-divisor? over over @ % leq? leq? ?ret !ret drop drop 1 ; .

: divisible?; !ret end? found-divisor? 1 + divisible?; .

: divisible? primes 001 + divisible?; .

: try-add-prime
    dup divisible? ?ret
    primes @ 1 + primes !
    dup primes @ primes + !
    >r 1 - r> ; .

: generate-loop; !ret enough? try-add-prime 1 + generate-loop; . 0

: generate-primes 2 generate-loop; .

: is-zero? dup leq? leq? ?ret !ret drop ; .

: print-num is-zero? dup 11 1 - / print-num 10 % 49 1 - + emit ; .

: print-primes; !ret end? dup @ print-num nl 1 + print-primes; .

: print-primes primes 1 + print-primes; .

: main I read-num generate-primes print-primes ; . main



