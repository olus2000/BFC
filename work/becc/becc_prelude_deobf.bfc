: I Q @ ! - * / leq? ) emit getc pick

: , 0 @ ! 0 @ -0001 - . ! )

: ; I 72 , 000043 86 01.1 ! 86 ! )

11110

: lit, 2 , , ; -> i

00032

: + -0001 * - ;

: push-relative .0001 @ + lit, 72 , ; -> A

: (quote); I 6 push-relative ; -> B

: dup . pick ; -> j

: drop . * - ; -> e

: over 1 pick ; -> h

: nip over - + ; -> s

: = - dup leq? over -1 * leq? * nip ;

: >r I 1 lit, -1 48 , lit, 84 056 , 0 lit, , 0052 001 lit, 52 , , ;

: r> I 01.11 lit, 48.111 , 48 , 1.11 lit, 48 , 1.11 lit, 56 , 01.11 lit, 52 , ;

: swap over >r nip r> ; -> f

: } I 43.111 86 1.111 ! 86 ! ;

1110011172

: (variable); I 03.111 push-relative 2 , ; -> C

: (constant); I 01 push-relative ; -> D

: (postpone); I .111 @ 4.011 + , 72 , ; -> E

: '?ret (variable); . = leq? 01 @ swap - 1 ! ; -> S

: '!ret (variable); 1 @ @ 001 @ 1 - 1 ! 1 @ ! ; -> T

: [if] (postpone);
: if I . @ 4 + dup 01 + , . @ '?ret lit, '!ret , . , '!ret lit, , ; -> R

: begin I . @ 1.110 + dup , '!ret lit, ; -> M

: while I [if] swap ; -> N

41111001111

: repeat I , . @ swap ! 2 , '!ret , ; -> P 

: else I . @ swap . , . @ swap ! '!ret lit, ; -> O

: then I . @ 01.11 + , . @ swap ! '!ret lit, ; -> U

: call I . @ 3.00111 + lit, 52 , . , ; -> V

: Y (variable);

05

: 'g (constant);

: 'number (variable);
    begin dup while
        >r dup >r call r> r> 1 -
    repeat
    drop 'g call ;

: boundary (variable);

: cell? boundary @ over - leq? nip ; -> d

: number? dup cell? if 3 + @ 'number = else drop . then ; -> H

: recycle dup Y @ over ! Y !
    dup number? if drop else
        1 + dup @ 'g call
        0001 + dup @ 'g call
        00001 + @ 'g call
    then ; -> J

: ('g) (quote);
: g dup cell? if 
        dup 0005 + @ 1 - dup
        if swap 005 + !
        else drop recycle then
    else drop then ;

: k swap g dup >r call r> g ; -> ~

: g+ dup cell? if dup 5 + @ 1 + over 5 + ! then ; -> J shadows "recycle"

: duup g+ dup ; -> |

: <cell>
    Y @ if Y @ dup @ Y !
    else . @ . , . , . , . , . , . , then
    . @ >r dup >r . !
    lit, , , 72 , 01.11 , r> r> . ! ;

# I'm reusing B here (previously quote)

: 'g-push (variable); r> dup 1.00 + >r @ g+ ; -> B

: cons swap 'g-push <cell> ; -> L

: take 'g-push swap <cell> ; -> X

: <number> dup -1.1110011111 = if drop 00256 then 'number swap 2 <cell> ;

: inp getc <number> ; -> &

: out-val (variable);

: '$ (variable); out-val @ 001 + out-val ! ;

: out . out-val ! >r '$ 0001 @ @ call out-val @ emit r> g ; -> n

: [ I . @ 3 + lit, . @ . , 02.11111 , ;

: ] I 72 , . @ swap ! '!ret lit, ;

: setup I
    ('g) 'g !
    . Y !
    . @ 01.1111 ! 043.1111 ,
    . @ 20111 +
    dup . ! boundary ! ;

: main I 
inp [ duup take duup k duup take duup k duup k ]
[ [ [ [ duup take duup k ] take duup k duup k ] cons ] ] take duup k duup k out
 ;

setup main


